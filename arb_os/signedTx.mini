//
// Copyright 2020, Offchain Labs, Inc. All rights reserved.
//

use std::rlp::rlp_encodeAndHashMessageInfoForSignature;
use std::rlp::SignedTx;

use chainParameters::chainParams_chainId;


public impure func recoverSigner(tx: SignedTx) -> option<address> {
    let rlpHashForSig = bytes32(0);
    if ( (tx.v == 27) || (tx.v == 28) ) {
        rlpHashForSig = rlp_encodeAndHashMessageInfoForSignature(tx, None<uint>);  // non-EIP155 signature
    } else {
        rlpHashForSig = rlp_encodeAndHashMessageInfoForSignature(tx, Some(chainParams_chainId()));  // EIP155 signature
    }
    let signer = asm(
        tx.r,
        tx.s,
        1 - (tx.v % 2),
        rlpHashForSig,
    ) address { ecrecover };

    return xif (signer == address(0)) {
        None<address>
    } else {
        Some(signer)
    };
}
