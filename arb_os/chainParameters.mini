//
// Copyright 2020-2021, Offchain Labs, Inc. All rights reserved.
//

use accounts::accounts_notifyParamsChanged;

use core::kvs::Kvs;
use core::kvs::builtin_kvsForall;

use std::bytearray::ByteArray;
use std::bytearray::bytearray_new;
use std::bytearray::bytearray_size;
use std::bytearray::bytearray_set256;

use std::bytestream::bytestream_new;
use std::bytestream::bytestream_get256;

use gasAccounting::gasAccounting_notifyParamsChanged;


var globalChainParameters: map<uint, uint>;

public impure func chainParams_get(which: uint) -> option<uint> {
    return globalChainParameters[which];
}

public impure func chainParams_getOrDie(which: uint) -> uint {
    return xif let Some(val) = chainParams_get(which) {
        val
    } else {
        panic
    };
}

public impure func chainParams_set(which: uint, value: uint) {
    globalChainParameters = globalChainParameters with { [which] = value };
}

public impure func chainParams_init() {
    globalChainParameters = chainParams_getDefaults();
}

public func chainParams_getDefaults() -> map<uint, uint> {
    return newmap<uint, uint>
        with { [const::Atom_Param_SecondsPerBlockNumerator] = const::Default_Param_SecondsPerBlockNumerator }
        with { [const::Atom_Param_SecondsPerBlockDenominator] = const::Default_Param_SecondsPerBlockDenominator }
        with { [const::Atom_Param_FeesEnabled] = const::Default_Param_FeesEnabled }
        with { [const::Atom_Param_NetworkFeeRecipient] = const::Default_Param_NetworkFeeRecipient }
        with { [const::Atom_Param_CongestionFeeRecipient] = const::Default_Param_CongestionFeeRecipient }
        with { [const::Atom_Param_DefaultAggregator] = const::Default_Param_DefaultAggregator }
        with { [const::Atom_Param_DefaultBaseTxFeeL1Gas] = const::Default_Param_DefaultBaseTxFeeL1Gas }
        with { [const::Atom_Param_MinBaseTxFeeL1Gas] = const::Default_Param_MinBaseTxFeeL1Gas }
        with { [const::Atom_Param_MaxBaseTxFeeL1Gas] = const::Default_Param_MaxBaseTxFeeL1Gas }
        with { [const::Atom_Param_ChainID] = const::Default_Param_ChainID }
        with { [const::Atom_Param_ChallengePeriodEthBlocks] = const::Default_Param_ChallengePeriodEthBlocks }
        with { [const::Atom_Param_SpeedLimitPerSecond] = const::Default_Param_SpeedLimitPerSecond }
        with { [const::Atom_Param_SecondsPerSend] = const::Default_Param_SecondsPerSend }
        with { [const::Atom_Param_ChainOwner] = const::Default_Param_ChainOwner }
        with { [const::Atom_Param_L1GasPerL1CalldataUnit] = const::Default_Param_L1GasPerL1CalldataUnit }
        with { [const::Atom_Param_L1GasPerStorage] = const::Default_Param_L1GasPerStorage }
        with { [const::Atom_Param_ArbGasDivisor] = const::Default_Param_ArbGasDivisor }
        with { [const::Atom_Param_NetworkFeeShareNumerator] = const::Default_Param_NetworkFeeShareNumerator }
        with { [const::Atom_Param_NetworkFeeShareDenominator] = const::Default_Param_NetworkFeeShareDenominator }
        with { [const::Atom_Param_GasPoolMax] = const::Default_Param_GasPoolMax }
        with { [const::Atom_Param_TxGasLimit] = const::Default_Param_TxGasLimit }
        with { [const::Atom_Param_RetryablePriceBase] = const::Default_Param_RetryablePriceBase }
        with { [const::Atom_Param_RetryablePricePerByteNumerator] = const::Default_Param_RetryablePricePerByteNumerator }
        with { [const::Atom_Param_RetryablePricePerByteDenominator] = const::Default_Param_RetryablePricePerByteDenominator }
        with { [const::Atom_Param_RetryableTxRepriceIntervalSeconds] = const::Default_Param_RetryableTxRepriceIntervalSeconds }
        with { [const::Atom_Param_L1GasPriceEstimateWeightNumerator] = const::Default_Param_L1GasPriceEstimateWeightNumerator }
        with { [const::Atom_Param_L1GasPriceEstimateWeightDenominator] = const::Default_Param_L1GasPriceEstimateWeightDenominator }
        with { [const::Atom_Param_RetryableTxLifetimeSeconds] = const::Default_Param_RetryableTxLifetimeSeconds }
        with { [const::Atom_Param_ArbitrumNonZeroBalanceCallStipend] = const::Default_Param_ArbitrumNonZeroBalanceCallStipend }
        with { [const::Atom_Param_GasPriceOracle] = const::Default_Param_GasPriceOracle }
    ;
}

public impure func chainParams_gotParamsMessage(data: ByteArray) {
    let stream = bytestream_new(data);
    loop {
        let paramId = xif let Some(res) = bytestream_get256(stream) {
            let (ustr, pid) = res;
            stream = ustr;
            pid
        } else {
            notifyParamsChanged();
            return;
            0
        };
        let value = xif let Some(res) = bytestream_get256(stream) {
            let (ustr, val) = res;
            stream = ustr;
            val
        } else {
            notifyParamsChanged();
            return;
            0
        };
        chainParams_set(paramId, value);
    }
}

public impure func notifyParamsChanged() {
    gasAccounting_notifyParamsChanged();
    accounts_notifyParamsChanged();
}

public impure func chainParams_chainId() -> uint {
    return chainParams_getOrDie(const::Atom_Param_ChainID);
}

public impure func chainParams_getOwner() -> address {
    return address(chainParams_getOrDie(const::Atom_Param_ChainOwner));
}

public impure func chainParams_getDefaultAggregator() -> address {
    return address(chainParams_getOrDie(const::Atom_Param_DefaultAggregator));
}

public impure func chainParams_setDefaultAggregator(newDefault: address) {
    chainParams_set(const::Atom_Param_DefaultAggregator, uint(newDefault));
}

public impure func chainParams_getSecondsPerSend() -> uint {
    return chainParams_getOrDie(const::Atom_Param_SecondsPerSend);
}

public impure func chainParams_serializeAllParams() -> ByteArray {
    return unsafecast<ByteArray>(
        builtin_kvsForall(
            unsafecast<Kvs>(globalChainParameters),
            unsafecast<func(any, any, any) -> any>(sapClosure),
            bytearray_new(0),
        )
    );
}

func sapClosure(key: uint, value: uint, ba: ByteArray) -> ByteArray {
    let sz = bytearray_size(ba);
    return bytearray_set256(
        bytearray_set256(ba, sz, key),
        sz+32,
        value,
    );
}
